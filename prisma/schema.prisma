// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transaction {
  id            String              @id @default(uuid())
  name          String
  type          TransactionType
  amount        Decimal             @db.Decimal(10, 2)
  category      TransactionCategory
  paymentMethod PaymentMethod       @map("payment_method")
  installments  Decimal             @default(1)
  userId        String              @map("user_id")
  date          DateTime
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  user          User                @relation(fields: [userId], references: [id])
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  emailVerified DateTime?
  name          String
  password      String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  transactions  Transaction[]
  nickname      String?       @default("")
  profileImage  String?
  subscription  Plan          @default(FREE)
  accounts      Account[]
}

enum Plan {
  FREE
  PREMIUM
}

enum TransactionType {
  DEPOSIT
  EXPENSE
  INVESTMENT
  LOAN
}

enum TransactionCategory {
  HOUSING
  TRANSPORTATION
  FOOD
  ENTERTAINMENT
  HEALTH
  UTILITY
  SALARY
  EDUCATION
  SUBSCRIPTION
  OTHER
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_TRANSFER
  BANK_SLIP
  OTHER
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  scope             String?
  token_type        String?
  id_token          String?

  @@unique([provider, providerAccountId])
}
